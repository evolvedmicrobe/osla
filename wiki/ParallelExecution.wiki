#summary How to run instrument and protocols simultaneously

= The Design Philosophy =

Clarity appears to run things only sequentially, but can easily run things in parallel.  A good analogy is to think of the default Clarity engine is as a single processor running multiple threads (or protocols).  This is not truly parallel, as a context switch completely transfers control from one protocol to another, so at any one moment there is only one running instruction/protocol.   However, Clarity can be made arbitrarily parallel by using virtual instruments.  A virtual instrument can view the machine state and rearrange reschedule protocols, register for events when instruments become free, and continue executing instructions after passing control back to the engine.  Using this approach, the engine can be easily made to act more like an operating system which hands out system resources to separately and concurrently running threads, but it is up to each of those threads to make sure the use of those resources don’t conflict. 

Really the problem was that for any specific instruments/protocols, it is almost certainly pretty easy to figure out how to avoid resource conflicts, but doing that generally is hard and introduces too much overhead in the things users have to specify when making protocols.  For example, if I had three instructions like unload a plate from an incubator, move it to a platform, and then do something with a liquid handler.  Well, I could have that last instruction only execute when the liquid handler is free, but I don’t want to have my plate sitting out of the incubator until the liquid handler is free, so really I would have to make sure none of those instructions executed.  Checking for that might be easy enough, but what if the liquid handler could perform some operations at the same time, but not all operations (So that of A,B and C operations, A and B can happen concurrently but C cannot).  Now I have to check if specific operations conflict.  Further, what if I couldn’t execute the third operation in a list of 3 instructions quite yet, but the first two instructions take at least 10 minutes, so I want to start them now.  One can of course come up with a general solution to this, but it would necessarily involve really bloated XML files and specifications of min/max times for operations, list of concurrent and non-concurrent operations, etc. etc.  It would probably take you some time just to figure out how to specify things so that your instrument was compatible with the engine.  

Rather than have Clarity tie you down with all this, it instead it gives you enough rope in the form of virtual instruments to hang yourself (it is very pythonic that way).    By default though, things are running in set order.   Virtual instruments allow you to control things in as simple or complex a way as needed.